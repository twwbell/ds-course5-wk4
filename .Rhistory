install.packages("swirl")
library(swirl)
swirl()
q()
library(swirl)
install.packages("swirl")
swirl()
library(swirl)
install.packages("RCurl")
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("stringi")
library(swirl)
swirl()
q()
library(dplyr)
install.packages("dplyr")
.libPaths()
?install.packages
install.packages("dplyr", lib = 2)
install.packages("dplyr", lib = .libPaths()[2])
?.libPaths
library(dplyr)
data <- read.csv(unzip("activity.zip"))
data <- mutate(data, date = as.Date(date))
str(data)
str(data)
R.home()
as.POSIXlt(20170726)
as.POSIXlt("26-07-2017")
as.POSIXlt("26-07-2017", "%d-%m-%Y")
warnings()
as.POSIXlt("2017-07-26", "%d-%m-%Y")
as.POSIXlt("2017-07-26")
as.POSIXlt("2017-07-26", tz="Amsterdam")
as.POSIXlt("2017-07-26", tz="Netherlands/Amsterdam")
as.POSIXlt("2017-07-26", tz="Germany/Berlin")
as.POSIXlt("2017-07-26", tz="Europe/Berlin")
as.POSIXlt("2017-07-26", tz="Europe/Berlin")$weekday
as.POSIXlt("2017-07-26", tz="Europe/Berlin")$wday
as.POSIXlt("2017-07-26", tz="Europe/Berlin")
?weekdays
weekdays(sys.date()
)
weekdays(Sys.Date())
factor(as.POSIXlt(data_imp_day$date)$wday,
levels=0:6, labels=c('weekend', 'weekday', 'weekday', 'weekday', 'weekday', 'weekday', 'weekend'))
---
title: "RepData Peer Assessment 1"
author: "Thomas Bell"
date: "7/23/2017"
output: html_document
---
# Activity Monitoring
## Loading and preprocessing the data
The following code is used to read the activity data into the memory of R. The zip archive **activity.zip** contains one file **activity.csv**. By calling the function unzip() from read.csv the text file is directly read from the archive and stored in a variable called *data*. With the function mutate() from the dplyr package the dates are converted into a Date-class in R.
```{r loading and preprocessing, warning=FALSE, message=FALSE, cache=TRUE}
library(dplyr)
data <- read.csv(unzip("activity.zip"))
data <- mutate(data, date = as.Date(date))
```
## What is mean total number of steps taken per day?
The following code chunk plots a histogram of the total number of steps per day using the Base plotting system. Followed by a calculation of the mean and median of the total number of steps taken per day. In this part of the assignment missing values in the data set are ignored.
1. Make a histogram of the total number of steps taken each day
```{r total mean median}
aggr_days <- aggregate(steps ~ date, data = data, sum)
hist(aggr_days$steps, main = "Total Number of Steps", xlab = "Steps")
act_mean <- format(mean(aggr_days$steps), scientific = FALSE)
act_median <- median(aggr_days$steps)
```
2. Calculate and report the **mean** and **median** total number of steps taken per day
The mean of the total number of steps taken per day is `r act_mean`
The median of the total number of steps taken per day is `r act_median`
## What is the average daily activity pattern?
1. Make a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r daily pattern}
aggr_interval <- aggregate(steps ~ interval, data = data, mean)
with(aggr_interval, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
max_interval <- aggr_interval[which.max(aggr_interval$steps),]
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
The 5-minute interval of `r max_interval$interval` contains the maximum number of steps, which is `r max_interval$steps`.
## Imputing missing values
Note that there are a number of days/intervals where there are missing
values (coded as `NA`). The presence of missing days may introduce
bias into some calculations or summaries of the data.
```{r missing values}
misvalues <- sum(is.na(data$steps))
```
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with `NA`s)
The total number of missing values in the dataset is `r misvalues`.
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
The original data frame is left joined with the aggregated data frame of the previous question based on the *interval* number. The joined data frame is mutated to replace the NAs in the *steps* column with the average steps in the column which was joined. After this operation the joined column is dropped so that a single *steps* column remains, containing either actual observations or average measurements for an *interval* on a certain date.
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r impute missing values, warning=FALSE, message=FALSE}
library(dplyr)
data %>% left_join(aggr_interval, by = c("interval", "interval")) %>% mutate(steps.x = as.double(steps.x)) %>% mutate(steps.x = if_else(is.na(steps.x), steps.y, steps.x)) %>% select(-steps.y) %>% rename(steps = steps.x)-> data_imputed
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the **mean** and **median** total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r total mean median imputed}
aggr_days_imp <- aggregate(steps ~ date, data = data_imputed, sum)
hist(aggr_days_imp$steps, main = "Total Number of Steps (imputed missing values)", xlab = "Steps")
act_mean_imp <- format(mean(aggr_days_imp$steps), scientific = FALSE)
act_median_imp <- format(median(aggr_days_imp$steps), scientific = FALSE)
```
The mean of the total number of steps taken per day (with imputed missing values) is `r act_mean_imp`
The median of the total number of steps taken per day (with imputed missing values) is `r act_median_imp`
## Are there differences in activity patterns between weekdays and weekends?
For this part the `weekdays()` function may be of some help here. Use
the dataset with the filled-in missing values for this part.
1. Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
```{r days factor}
library(dplyr)
data_imp_day <- mutate(data_imp_day, day_type = factor(as.POSIXlt(data_imp_day$date)$wday,
levels=0:6, labels=c('weekend', 'weekday', 'weekday', 'weekday', 'weekday', 'weekday', 'weekend'))
```
1. Make a panel plot containing a time series plot (i.e. `type = "l"`) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using **simulated data**:
```{r time series panel, warning=FALSE, message=FALSE}
library(ggplot2)
library(dplyr)
days <- if_else(as.POSIXlt(data_imputed$date)$wday
```
data_imp_day <- mutate(data_imp_day, day_type = factor(as.POSIXlt(data_imp_day$date)$wday,
levels=0:6, labels=c('weekend', 'weekday', 'weekday', 'weekday', 'weekday', 'weekday', 'weekend'))
data_imp_day <- mutate(data_imp_day, day_type = factor(as.POSIXlt(data_imp_day$date)$wday,
data_imp_day <- mutate(data_imp_day, day_type = factor(as.POSIXlt(data_imp_day$date)$wday,
levels=c(0:6), labels=c('weekend', 'weekday', 'weekday', 'weekday', 'weekday', 'weekday', 'weekend')))
data_imp_day <- mutate(data_imputed, day_type = factor(as.POSIXlt(data_imputed$date)$wday,
levels=c(0:6), labels=c('weekend', 'weekday', 'weekday', 'weekday', 'weekday', 'weekday', 'weekend')))
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday)
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% if_else(day %in% 1:5, "weekday", "weekend")
1 %in% 1:5
?if_else
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday)
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday)
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% if_else(day < 3, "weekday", "weekend")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% if_else(1 < 3, "weekday", "weekend")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% if_else(1 < 3, "weekday", "weekend")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% ifelse(1 < 3, "weekday", "weekend")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% ifelse(1 < 3, "weekday", "weekend")
if_else(1<3, "hoi", "kut")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% ifelse(day == 1, "weekday", "weekend")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")
)
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")) -> data_imp_days
View(data_imp_days)
str(data_imp_days)
unique(data_imp_days$day)
subset(data_imp_days, day == "weekend")
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")) %>% factor(day, c("weekday","weekend"))  -> data_imp_days
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")) %>% mutate(day = factor(.$day, c("weekday","weekend")) -> data_imp_days
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")) %>% mutate(day = factor(.$day, c("weekday","weekend")) -> data_imp_days
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")) %>% mutate(day = factor(.$day, c("weekday","weekend")) -> data_imp_days
)
data_imputed %>% mutate(day = as.POSIXlt(data_imputed$date)$wday) %>% mutate(day = ifelse(day %in% 1:5, "weekday", "weekend")) %>% mutate(day = factor(.$day, c("weekday","weekend"))) -> data_imp_days
str(data_imp_days)
?ggplot(data_imp_days)
ggplot(data, aes(interval, steps))
ggplot(data, aes(interval, steps)) + geom_bar()
ggplot(data, aes(interval, steps)) + geom_col()
ggplot(data_imp_days, aes(interval, steps)) + geom_col()
ggplot(data_imp_days, aes(interval, steps)) + geom_col() + facet_wrap(~day)
ggplot(data_imp_days, aes(interval, steps)) + geom_line() + facet_wrap(~day)
ggplot(data_imp_days, aes(interval, steps)) + geom_line() + facet_wrap(~day)
ggplot(data_imp_days, aes(interval, steps)) -> p
p
p + geom_line()
with(data_imp_days, plot(interval, steps, type = "l"))
aggregate(steps ~ interval, data = data_imp_days, mean)
aggregate(steps ~ interval, data = subset(data_imp_days, day == 1), mean)
aggregate(steps ~ interval, data = subset(data_imp_days, day = 1), mean)
aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekday"), mean)
?aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekday"), mean)
?aggregate(steps ~ interval, day, data = subset(data_imp_days, day = "weekday"), mean)
?aggregate(steps ~ interval, day, data = data_imp_days, mean)
aggregate(steps ~ interval, day, data = data_imp_days, mean)
aggregate(steps ~ interval, by = day, data = data_imp_days, mean)
data_imp_days
aggregate(steps ~ interval, by = day, data = data_imp_days, mean)
tapply(steps ~ interval, by = day, data = data_imp_days, mean)
tapply(steps ~ interval, by = day, data = data_imp_days, mean)
?lapply()
lapply(data_imp_days, day, summary)
lapply(data_imp_days, list("weekday", "weekend"), summary)
lapply(data_imp_days, c("weekday", "weekend"), summary)
lapply(data_imp_days, interval, summary)
aggregate(steps ~ interval, by = day, data = subset(data_imp_days, day = "weekday"), mean)
names(data_imp_days)
aggregate(steps ~ interval, by = day, data = subset(data_imp_days, day = "weekday"), mean)
aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekday"), mean)
aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekday"), mean)
?sapply()
lapply(data_imp_days, day, nrow)
lapply(data_imp_days, steps, nrow)
lapply(data_imp_days, nrow)
sapply(data_imp_days, nrow)
apply(data_imp_days, nrow)
split(data_imp_days, data_imp_days$day)
split(data_imp_days, data_imp_days$day) -> splitje
aggregate(steps ~ interval, data = splitje, mean)
lapply(splitje, aggregate(steps~interval))
lapply(splitje, aggregate(steps~interval, data = splitje))
aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekday"), mean)
?mfpar()
par(mfrow = c(2,1))
with(aggr_weekdays, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
aggr_weekday <- aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekday"), mean)
aggr_weekend <- aggregate(steps ~ interval, data = subset(data_imp_days, day = "weekend"), mean)
with(aggr_weekday, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekend, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekday, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekday, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekend, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekday, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
str(aggr_weekday)
str(aggr_weekend)
aggr_weekday <- aggregate(steps ~ interval, data = subset(data_imp_days, day = 1), mean)
aggr_weekend <- aggregate(steps ~ interval, data = subset(data_imp_days, day = 2), mean)
subset(data_imp_days, day = 1)
nrow(subset(data_imp_days, day = 1))
nrow(subset(data_imp_days, day = 2))
nrow(subset(data_imp_days, day = "weekend"))
nrow(subset(data_imp_days, day == "weekend"))
aggr_weekday <- aggregate(steps ~ interval, data = subset(data_imp_days, day == "weekday"), mean)
aggr_weekend <- aggregate(steps ~ interval, data = subset(data_imp_days, day == "weekend"), mean)
with(aggr_weekday, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekend, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
par(mfrow = c(2,1))
with(aggr_weekend, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
with(aggr_weekday, plot(interval, steps, type = "l", lwd = 2, col = "red", main = "Time Series Average Number of Steps", xlab = "5-minute intervals"))
.libPaths()
install.packages(lattice, lib = .libPaths()[2])
install.packages("lattice", lib = .libPaths()[2])
set.wd("~/Repos/ds-course5-wk4")
setwd("~/Repos/ds-course5-wk4")
setwd("~/GitHub/ds-course5-wk4")
dir()
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv(unzip("repdata%2Fdata%2FStormData.csv.bz2"))
?unzip
data <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
data <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
head(data)
str(data)
unique(data$STATE_)
